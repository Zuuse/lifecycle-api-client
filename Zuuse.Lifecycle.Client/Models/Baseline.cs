// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Zuuse.Lifecycle.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class Baseline
    {
        /// <summary>
        /// Initializes a new instance of the Baseline class.
        /// </summary>
        public Baseline()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Baseline class.
        /// </summary>
        /// <param name="status">Possible values include: 'Unset', 'Running',
        /// 'Canceling', 'Completed', 'Deleting', 'Deleted', 'Canceled',
        /// 'Errored'</param>
        public Baseline(string status, string displayName, double discountRate, int forecastHorizon, string errorMessage = default(string), System.DateTime? runDate = default(System.DateTime?), int? startYear = default(int?), string id = default(string), System.DateTime? versionDate = default(System.DateTime?), string versionBy = default(string), System.DateTime? createdDate = default(System.DateTime?), string createdBy = default(string), bool? isActive = default(bool?))
        {
            Status = status;
            ErrorMessage = errorMessage;
            DisplayName = displayName;
            DiscountRate = discountRate;
            RunDate = runDate;
            ForecastHorizon = forecastHorizon;
            StartYear = startYear;
            Id = id;
            VersionDate = versionDate;
            VersionBy = versionBy;
            CreatedDate = createdDate;
            CreatedBy = createdBy;
            IsActive = isActive;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets possible values include: 'Unset', 'Running',
        /// 'Canceling', 'Completed', 'Deleting', 'Deleted', 'Canceled',
        /// 'Errored'
        /// </summary>
        [JsonProperty(PropertyName = "Status")]
        public string Status { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ErrorMessage")]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "DisplayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "DiscountRate")]
        public double DiscountRate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "RunDate")]
        public System.DateTime? RunDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ForecastHorizon")]
        public int ForecastHorizon { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "StartYear")]
        public int? StartYear { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "VersionDate")]
        public System.DateTime? VersionDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "VersionBy")]
        public string VersionBy { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "CreatedDate")]
        public System.DateTime? CreatedDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "CreatedBy")]
        public string CreatedBy { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsActive")]
        public bool? IsActive { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Status == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Status");
            }
            if (DisplayName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DisplayName");
            }
            if (DiscountRate > 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "DiscountRate", 1);
            }
            if (DiscountRate < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "DiscountRate", 0);
            }
            if (ForecastHorizon > 100)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "ForecastHorizon", 100);
            }
            if (ForecastHorizon < 10)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "ForecastHorizon", 10);
            }
        }
    }
}
