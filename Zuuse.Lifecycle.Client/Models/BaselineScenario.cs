// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Zuuse.Lifecycle.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class BaselineScenario
    {
        /// <summary>
        /// Initializes a new instance of the BaselineScenario class.
        /// </summary>
        public BaselineScenario()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the BaselineScenario class.
        /// </summary>
        public BaselineScenario(string displayName, string baselineId = default(string), IList<Deferral> deferrals = default(IList<Deferral>), IList<double?> budget = default(IList<double?>), bool? isPublished = default(bool?), string id = default(string), System.DateTime? versionDate = default(System.DateTime?), string versionBy = default(string), System.DateTime? createdDate = default(System.DateTime?), string createdBy = default(string), bool? isActive = default(bool?))
        {
            DisplayName = displayName;
            BaselineId = baselineId;
            Deferrals = deferrals;
            Budget = budget;
            IsPublished = isPublished;
            Id = id;
            VersionDate = versionDate;
            VersionBy = versionBy;
            CreatedDate = createdDate;
            CreatedBy = createdBy;
            IsActive = isActive;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "DisplayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "BaselineId")]
        public string BaselineId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Deferrals")]
        public IList<Deferral> Deferrals { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Budget")]
        public IList<double?> Budget { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsPublished")]
        public bool? IsPublished { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "VersionDate")]
        public System.DateTime? VersionDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "VersionBy")]
        public string VersionBy { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "CreatedDate")]
        public System.DateTime? CreatedDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "CreatedBy")]
        public string CreatedBy { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsActive")]
        public bool? IsActive { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (DisplayName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DisplayName");
            }
            if (DisplayName != null)
            {
                if (DisplayName.Length > 40)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "DisplayName", 40);
                }
                if (DisplayName.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "DisplayName", 0);
                }
            }
        }
    }
}
