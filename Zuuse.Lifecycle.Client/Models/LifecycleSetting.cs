// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Zuuse.Lifecycle.Client.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class LifecycleSetting
    {
        /// <summary>
        /// Initializes a new instance of the LifecycleSetting class.
        /// </summary>
        public LifecycleSetting()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the LifecycleSetting class.
        /// </summary>
        /// <param name="method">Possible values include: 'NotIncluded',
        /// 'Active', 'Passive', 'Reserve'</param>
        /// <param name="maintenanceStrategy">Possible values include: 'Unset',
        /// 'Preemptive', 'RunToFailure'</param>
        /// <param name="deteriorationCurve">Possible values include: 'Unset',
        /// 'CurveA', 'CurveB', 'CurveC', 'CurveD', 'CurveE'</param>
        public LifecycleSetting(string method = default(string), double? acquisitionCost = default(double?), double? grossReplacementCost = default(double?), System.DateTime? dateInstalled = default(System.DateTime?), int? usefulLife = default(int?), int? quantity = default(int?), string units = default(string), string maintenanceStrategy = default(string), string acceptableRisk = default(string), string failureConsequence = default(string), double? acceptableProbability = default(double?), double? utilisationFactor = default(double?), double? wearOutRate = default(double?), int? mTBF = default(int?), string minimumCondition = default(string), string initialCondition = default(string), string deteriorationCurve = default(string), double? reserve = default(double?), IList<Value> values = default(IList<Value>), System.DateTime? createdDate = default(System.DateTime?), string createdBy = default(string), bool? isActive = default(bool?), string id = default(string), System.DateTime? versionDate = default(System.DateTime?), string versionBy = default(string), bool? locked = default(bool?), string templateReference = default(string), AssetReference owner = default(AssetReference), IList<Relation> relatedEntities = default(IList<Relation>))
        {
            Method = method;
            AcquisitionCost = acquisitionCost;
            GrossReplacementCost = grossReplacementCost;
            DateInstalled = dateInstalled;
            UsefulLife = usefulLife;
            Quantity = quantity;
            Units = units;
            MaintenanceStrategy = maintenanceStrategy;
            AcceptableRisk = acceptableRisk;
            FailureConsequence = failureConsequence;
            AcceptableProbability = acceptableProbability;
            UtilisationFactor = utilisationFactor;
            WearOutRate = wearOutRate;
            MTBF = mTBF;
            MinimumCondition = minimumCondition;
            InitialCondition = initialCondition;
            DeteriorationCurve = deteriorationCurve;
            Reserve = reserve;
            Values = values;
            CreatedDate = createdDate;
            CreatedBy = createdBy;
            IsActive = isActive;
            Id = id;
            VersionDate = versionDate;
            VersionBy = versionBy;
            Locked = locked;
            TemplateReference = templateReference;
            Owner = owner;
            RelatedEntities = relatedEntities;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets possible values include: 'NotIncluded', 'Active',
        /// 'Passive', 'Reserve'
        /// </summary>
        [JsonProperty(PropertyName = "Method")]
        public string Method { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "AcquisitionCost")]
        public double? AcquisitionCost { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "GrossReplacementCost")]
        public double? GrossReplacementCost { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "DateInstalled")]
        public System.DateTime? DateInstalled { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "UsefulLife")]
        public int? UsefulLife { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Quantity")]
        public int? Quantity { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Units")]
        public string Units { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Unset', 'Preemptive',
        /// 'RunToFailure'
        /// </summary>
        [JsonProperty(PropertyName = "MaintenanceStrategy")]
        public string MaintenanceStrategy { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "AcceptableRisk")]
        public string AcceptableRisk { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "FailureConsequence")]
        public string FailureConsequence { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "AcceptableProbability")]
        public double? AcceptableProbability { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "UtilisationFactor")]
        public double? UtilisationFactor { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "WearOutRate")]
        public double? WearOutRate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "MTBF")]
        public int? MTBF { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "MinimumCondition")]
        public string MinimumCondition { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "InitialCondition")]
        public string InitialCondition { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Unset', 'CurveA', 'CurveB',
        /// 'CurveC', 'CurveD', 'CurveE'
        /// </summary>
        [JsonProperty(PropertyName = "DeteriorationCurve")]
        public string DeteriorationCurve { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Reserve")]
        public double? Reserve { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Values")]
        public IList<Value> Values { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "CreatedDate")]
        public System.DateTime? CreatedDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "CreatedBy")]
        public string CreatedBy { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsActive")]
        public bool? IsActive { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "VersionDate")]
        public System.DateTime? VersionDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "VersionBy")]
        public string VersionBy { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Locked")]
        public bool? Locked { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "TemplateReference")]
        public string TemplateReference { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Owner")]
        public AssetReference Owner { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "RelatedEntities")]
        public IList<Relation> RelatedEntities { get; private set; }

    }
}
