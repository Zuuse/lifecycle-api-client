// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Zuuse.Lifecycle.Client.Models
{
    /// <summary> The LifecycleSetting. </summary>
    public partial class LifecycleSetting
    {
        /// <summary> Initializes a new instance of LifecycleSetting. </summary>
        public LifecycleSetting()
        {
            Values = new ChangeTrackingList<Value>();
            RelatedEntities = new ChangeTrackingList<Relation>();
        }

        /// <summary> Initializes a new instance of LifecycleSetting. </summary>
        /// <param name="method"> . </param>
        /// <param name="acquisitionCost"> . </param>
        /// <param name="grossReplacementCost"> . </param>
        /// <param name="dateInstalled"> . </param>
        /// <param name="usefulLife"> . </param>
        /// <param name="quantity"> . </param>
        /// <param name="units"> . </param>
        /// <param name="maintenanceStrategy"> . </param>
        /// <param name="acceptableRisk"> . </param>
        /// <param name="failureConsequence"> . </param>
        /// <param name="acceptableProbability"> . </param>
        /// <param name="utilisationFactor"> . </param>
        /// <param name="wearOutRate"> . </param>
        /// <param name="mtbf"> . </param>
        /// <param name="minimumCondition"> . </param>
        /// <param name="initialCondition"> . </param>
        /// <param name="deteriorationCurve"> . </param>
        /// <param name="reserve"> . </param>
        /// <param name="values"> . </param>
        /// <param name="createdDate"> . </param>
        /// <param name="createdBy"> . </param>
        /// <param name="isActive"> . </param>
        /// <param name="id"> . </param>
        /// <param name="versionDate"> . </param>
        /// <param name="versionBy"> . </param>
        /// <param name="locked"> . </param>
        /// <param name="templateReference"> . </param>
        /// <param name="owner"> . </param>
        /// <param name="relatedEntities"> . </param>
        internal LifecycleSetting(LifecycleSettingMethod? method, double? acquisitionCost, double? grossReplacementCost, DateTimeOffset? dateInstalled, int? usefulLife, int? quantity, string units, LifecycleSettingMaintenanceStrategy? maintenanceStrategy, string acceptableRisk, string failureConsequence, double? acceptableProbability, double? utilisationFactor, double? wearOutRate, int? mtbf, string minimumCondition, string initialCondition, LifecycleSettingDeteriorationCurve? deteriorationCurve, double? reserve, IReadOnlyList<Value> values, DateTimeOffset? createdDate, string createdBy, bool? isActive, string id, DateTimeOffset? versionDate, string versionBy, bool? locked, string templateReference, AssetReference owner, IReadOnlyList<Relation> relatedEntities)
        {
            Method = method;
            AcquisitionCost = acquisitionCost;
            GrossReplacementCost = grossReplacementCost;
            DateInstalled = dateInstalled;
            UsefulLife = usefulLife;
            Quantity = quantity;
            Units = units;
            MaintenanceStrategy = maintenanceStrategy;
            AcceptableRisk = acceptableRisk;
            FailureConsequence = failureConsequence;
            AcceptableProbability = acceptableProbability;
            UtilisationFactor = utilisationFactor;
            WearOutRate = wearOutRate;
            Mtbf = mtbf;
            MinimumCondition = minimumCondition;
            InitialCondition = initialCondition;
            DeteriorationCurve = deteriorationCurve;
            Reserve = reserve;
            Values = values;
            CreatedDate = createdDate;
            CreatedBy = createdBy;
            IsActive = isActive;
            Id = id;
            VersionDate = versionDate;
            VersionBy = versionBy;
            Locked = locked;
            TemplateReference = templateReference;
            Owner = owner;
            RelatedEntities = relatedEntities;
        }

        public LifecycleSettingMethod? Method { get; set; }
        public double? AcquisitionCost { get; set; }
        public double? GrossReplacementCost { get; set; }
        public DateTimeOffset? DateInstalled { get; set; }
        public int? UsefulLife { get; set; }
        public int? Quantity { get; set; }
        public string Units { get; set; }
        public LifecycleSettingMaintenanceStrategy? MaintenanceStrategy { get; set; }
        public string AcceptableRisk { get; set; }
        public string FailureConsequence { get; set; }
        public double? AcceptableProbability { get; set; }
        public double? UtilisationFactor { get; set; }
        public double? WearOutRate { get; set; }
        public int? Mtbf { get; set; }
        public string MinimumCondition { get; set; }
        public string InitialCondition { get; set; }
        public LifecycleSettingDeteriorationCurve? DeteriorationCurve { get; set; }
        public double? Reserve { get; set; }
        public IReadOnlyList<Value> Values { get; }
        public DateTimeOffset? CreatedDate { get; set; }
        public string CreatedBy { get; set; }
        public bool? IsActive { get; set; }
        public string Id { get; set; }
        public DateTimeOffset? VersionDate { get; set; }
        public string VersionBy { get; set; }
        public bool? Locked { get; set; }
        public string TemplateReference { get; set; }
        public AssetReference Owner { get; set; }
        public IReadOnlyList<Relation> RelatedEntities { get; }
    }
}
