// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Zuuse.Lifecycle.Client
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for BaselineOperations.
    /// </summary>
    public static partial class BaselineOperationsExtensions
    {
            /// <summary>
            /// Retrieve a collection of baselines
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// The name of the client account
            /// </param>
            public static IList<Baseline> GetBaselines(this IBaselineOperations operations, string client)
            {
                return operations.GetBaselinesAsync(client).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve a collection of baselines
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// The name of the client account
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Baseline>> GetBaselinesAsync(this IBaselineOperations operations, string client, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBaselinesWithHttpMessagesAsync(client, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve a single baseline by Guid
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// The name of the client account.
            /// </param>
            /// <param name='id'>
            /// The baseline Guid to retrieve.
            /// </param>
            public static Baseline GetBaseline(this IBaselineOperations operations, string client, string id)
            {
                return operations.GetBaselineAsync(client, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve a single baseline by Guid
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// The name of the client account.
            /// </param>
            /// <param name='id'>
            /// The baseline Guid to retrieve.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Baseline> GetBaselineAsync(this IBaselineOperations operations, string client, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBaselineWithHttpMessagesAsync(client, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Upserts a single baseline
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// The name of the client account.
            /// </param>
            /// <param name='id'>
            /// The Id of the baseline
            /// </param>
            /// <param name='baseline'>
            /// The baseline to insert/update. contained in the httppost body
            /// </param>
            /// <param name='generate'>
            /// Option to run/generate the baseline right after it's saved
            /// </param>
            public static string UpsertBaseline(this IBaselineOperations operations, string client, string id, Baseline baseline, bool? generate = default(bool?))
            {
                return operations.UpsertBaselineAsync(client, id, baseline, generate).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Upserts a single baseline
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// The name of the client account.
            /// </param>
            /// <param name='id'>
            /// The Id of the baseline
            /// </param>
            /// <param name='baseline'>
            /// The baseline to insert/update. contained in the httppost body
            /// </param>
            /// <param name='generate'>
            /// Option to run/generate the baseline right after it's saved
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> UpsertBaselineAsync(this IBaselineOperations operations, string client, string id, Baseline baseline, bool? generate = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpsertBaselineWithHttpMessagesAsync(client, id, baseline, generate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a single baseline by Guid
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// The name of the client account.
            /// </param>
            /// <param name='id'>
            /// The baseline Guid to delete.
            /// </param>
            public static string DeleteBaseline(this IBaselineOperations operations, string client, string id)
            {
                return operations.DeleteBaselineAsync(client, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a single baseline by Guid
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// The name of the client account.
            /// </param>
            /// <param name='id'>
            /// The baseline Guid to delete.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> DeleteBaselineAsync(this IBaselineOperations operations, string client, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteBaselineWithHttpMessagesAsync(client, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve a summary of baseline Guids
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// The name of the client account.
            /// </param>
            public static IList<SyncSummaryElement> GetBaselineSummary(this IBaselineOperations operations, string client)
            {
                return operations.GetBaselineSummaryAsync(client).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve a summary of baseline Guids
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// The name of the client account.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<SyncSummaryElement>> GetBaselineSummaryAsync(this IBaselineOperations operations, string client, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBaselineSummaryWithHttpMessagesAsync(client, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves the interventions for a baseline
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// </param>
            /// <param name='baselineId'>
            /// </param>
            /// <param name='locationId'>
            /// The unique Id for the position of location taxonomy
            /// </param>
            /// <param name='functionId'>
            /// The unique Id for the position of function taxonomy
            /// </param>
            public static BaselineInterventions BaselineInterventionsMethod(this IBaselineOperations operations, string client, string baselineId, System.Guid? locationId = default(System.Guid?), System.Guid? functionId = default(System.Guid?))
            {
                return operations.BaselineInterventionsMethodAsync(client, baselineId, locationId, functionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the interventions for a baseline
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// </param>
            /// <param name='baselineId'>
            /// </param>
            /// <param name='locationId'>
            /// The unique Id for the position of location taxonomy
            /// </param>
            /// <param name='functionId'>
            /// The unique Id for the position of function taxonomy
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BaselineInterventions> BaselineInterventionsMethodAsync(this IBaselineOperations operations, string client, string baselineId, System.Guid? locationId = default(System.Guid?), System.Guid? functionId = default(System.Guid?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BaselineInterventionsMethodWithHttpMessagesAsync(client, baselineId, locationId, functionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve a baseline summary
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// </param>
            /// <param name='baselineId'>
            /// </param>
            /// <param name='locationId'>
            /// The unique Id for the position of location taxonomy
            /// </param>
            /// <param name='functionId'>
            /// The unique Id for the position of function taxonomy
            /// </param>
            public static BaselineSummary BaselineInterventionSummary(this IBaselineOperations operations, string client, string baselineId, System.Guid? locationId = default(System.Guid?), System.Guid? functionId = default(System.Guid?))
            {
                return operations.BaselineInterventionSummaryAsync(client, baselineId, locationId, functionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve a baseline summary
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// </param>
            /// <param name='baselineId'>
            /// </param>
            /// <param name='locationId'>
            /// The unique Id for the position of location taxonomy
            /// </param>
            /// <param name='functionId'>
            /// The unique Id for the position of function taxonomy
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BaselineSummary> BaselineInterventionSummaryAsync(this IBaselineOperations operations, string client, string baselineId, System.Guid? locationId = default(System.Guid?), System.Guid? functionId = default(System.Guid?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BaselineInterventionSummaryWithHttpMessagesAsync(client, baselineId, locationId, functionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Will generate baseline interventions
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='force'>
            /// </param>
            public static void GenerateBaseline(this IBaselineOperations operations, string client, string id, bool? force = default(bool?))
            {
                operations.GenerateBaselineAsync(client, id, force).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Will generate baseline interventions
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='force'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GenerateBaselineAsync(this IBaselineOperations operations, string client, string id, bool? force = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GenerateBaselineWithHttpMessagesAsync(client, id, force, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Will update the baseline status to "Canceling" so the webjob can cancel its
            /// generation and hard delete its interventions
            /// The webjob checks for the baseline status every second. Once the cancel
            /// process is done it will set the baseline status to "Deleted"
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void CancelBaselineGeneration(this IBaselineOperations operations, string client, string id)
            {
                operations.CancelBaselineGenerationAsync(client, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Will update the baseline status to "Canceling" so the webjob can cancel its
            /// generation and hard delete its interventions
            /// The webjob checks for the baseline status every second. Once the cancel
            /// process is done it will set the baseline status to "Deleted"
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='client'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CancelBaselineGenerationAsync(this IBaselineOperations operations, string client, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.CancelBaselineGenerationWithHttpMessagesAsync(client, id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
